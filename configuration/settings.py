"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from utils import logging

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

path = lambda *a: os.path.join(BASE_DIR, *a)

SERVICE = os.environ.get('SERVICE', 'messaging-service')

ENVIRONMENT = os.environ['ENVIRONMENT']

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '26+*5vhm#b$xo%_b=rl)%69*l1exu)-h&q_cmr#0^zmex3gee3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'app.api.apps.ApiAppConfig',
    'app.core.apps.CoreAppConfig',
    'app.channels.at.apps.AfricasTalkingChannelAppConfig',
    'app.channels.firebase.apps.FirebaseChannelAppConfig',
    'app.channels.httpbin.apps.HTTPBINChannelAppConfig',
    'app.channels.smpp.apps.SMPPChannelAppConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'

]

ROOT_URLCONF = 'configuration.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'configuration.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'messaging-service'),
        'USER': os.environ.get('DB_USER', 'messaging-service'),
        'PASSWORD': os.environ.get('DB_PASS', 'P@55w0rd'),
        'HOST': os.environ.get('DB_HOST', 'db'),
        'PORT': os.environ.get('DB_PORT', 5432),
    }


}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'

API_KEY = 'api-key'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # 'filters': {
    #     'environment': {
    #         '()': 'configuration.CustomFilter',
    #     },
    # },
    'handlers': {
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'formatter': 'verbose',
            # 'filters': ['environment'],
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            # 'filters': ['environment'],
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s module=%(module)s, '
                      'process_id=%(process)d, path=%(pathname)s, %(message)s, '
                      'funcName=%(funcName)s, lineNumber=%(lineno)d \n'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['sentry'],
            'level': 'DEBUG',
        },
        'api': {
            'handlers': ['console', 'sentry'],
            'level': 'DEBUG',
            'propagate': False
        },
        'utils': {
            'handlers': ['console', 'sentry'],
            'level': 'DEBUG',
            'propagate': False
        },
        'celery': {
            'handlers': ['console', 'sentry'],
            'level': 'DEBUG',
            'propagate': True
        },
        'app': {
            'handlers': ['console', 'sentry'],
            'level': 'DEBUG',
            'propagate': False
        },

    }
}

logging.init_logging()

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    'DEFAULT_PERMISSION_CLASSES': [],
}

# CELERY namespace
# todo: investigate why tasks are not loaded automatically
CELERY_IMPORTS = (
    'app.channels.at.tasks',
    'app.channels.firebase.tasks',
    'app.channels.smpp.tasks'
)

BROKER_URL = os.environ['BROKER_URL']

BROKER_USE_SSL = False

C_FORCE_ROOT = True

CELERY_ROUTES = {
    'africas-talking.sms.send_message': {
        'queue': 'africas-talking.sms.send_message'
    },
    'firebase.push.send_message': {
        'queue': 'firebase.push.send_message'
    },
    'httpbin.dummy.send_message': {
        'queue': 'httpbin.dummy.send_message'
    },
    'smpp.sms.send_message': {
        'queue': 'smpp.sms.send_message'
    },
    'all.send_message.callback': {
        'queue': 'all.send_message.callback'
    }
}

# CORS
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True


# Africas Talking config
AFRICAS_TALKING_USERNAME = "sandbox"
AFRICAS_TALKING_API_KEY = "b10b95441d5900c9ffc76a92e4a7738e602a54ebee54adc7929a342f1278d8a5"

# Redis
REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
REDIS_PORT = os.environ.get("REDIS_PORT", 6379)
SMPP_OUTBOUND_QUEUE = "smpp-sms-outbound-queue"

# HTTPBIN
HTTPBIN_URL = os.environ.get("HTTPBIN_URL", "http://httpbin:8000")
